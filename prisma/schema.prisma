generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Group {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  users User[]
  tasks Task[]
}

enum Role {
  TRANSCRIBER
  REVIEWER
  FINAL_REVIEWER
}

enum State {
  imported
  transcribing
  trashed
  submitted
  accepted
  finalised
}

model Task {
  id                    Int       @id @default(autoincrement())
  group_id              Int
  group                 Group     @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_group_id_foreign")
  state                 State     @default(imported)
  inference_transcript  String?   @db.VarChar(255)
  transcript            String?   @db.VarChar(255)
  reviewed_transcript   String?   @db.VarChar(255)
  final_transcript      String?   @db.VarChar(255)
  file_name             String    @db.VarChar(255)
  url                   String    @db.Text
  transcriber_id        Int?
  transcriber           User?     @relation("TranscriberTasks", fields: [transcriber_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_transcriber_id_foreign")
  reviewer_id           Int?
  reviewer              User?     @relation("ReviewerTasks", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_reviewer_id_foreign")
  final_reviewer_id     Int?
  final_reviewer        User?     @relation("FinalReviewerTasks", fields: [final_reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_final_reviewer_id_foreign")
  created_at            DateTime? @default(now())
  submitted_on          DateTime? @updatedAt()
  reviewed_on           DateTime? @updatedAt()
  finalised_reviewed_on DateTime? @updatedAt()

  @@index([final_reviewer_id], map: "task_final_reviewer_id_foreign")
  @@index([group_id], map: "task_group_id_foreign")
  @@index([reviewer_id], map: "task_reviewer_id_foreign")
  @@index([transcriber_id], map: "task_transcriber_id_foreign")
}

model User {
  id                  Int    @id @default(autoincrement())
  name                String @unique @db.VarChar(255)
  group_id            Int
  role                Role   @default(TRANSCRIBER)
  transcriber_task    Task[] @relation("TranscriberTasks")
  reviewer_task       Task[] @relation("ReviewerTasks")
  final_reviewer_task Task[] @relation("FinalReviewerTasks")
  group               Group  @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_group_id_foreign")

  @@index([group_id], map: "user_group_id_foreign")
}


// model Group {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(255)
//   task Task[]
//   user User[]
// }

// model Role {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(255)
//   user User[]
// }

// model State {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(255)
//   task Task[]
// }

// model Task {
//   id                                Int       @id @default(autoincrement())
//   group_id                          Int
//   state_id                          Int
//   inference_transcript              String?   @db.VarChar(255)
//   transcript                        String?   @db.VarChar(255)
//   reviewed_transcript               String?   @db.VarChar(255)
//   final_transcript                  String?   @db.VarChar(255)
//   file_name                         String    @db.VarChar(255)
//   url                               String    @db.Text
//   transcriber_id                    Int?      
//   reviewer_id                       Int?
//   final_reviewer_id                 Int?
//   created_at                        DateTime? @default(now())
//   submitted_on                      DateTime? @updatedAt()
//   reviewed_on                       DateTime? @updatedAt()
//   finalised_reviewed_on             DateTime? @updatedAt()
//   user_task_final_reviewer_idTouser User?     @relation("task_final_reviewer_idTouser", fields: [final_reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_final_reviewer_id_foreign")
//   group                             Group     @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_group_id_foreign")
//   user_task_reviewer_idTouser       User?     @relation("task_reviewer_idTouser", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_reviewer_id_foreign")
//   state                             State     @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_state_id_foreign")
//   user_task_transcriber_idTouser    User?     @relation("task_transcriber_idTouser", fields: [transcriber_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_transcriber_id_foreign")

//   @@index([final_reviewer_id], map: "task_final_reviewer_id_foreign")
//   @@index([group_id], map: "task_group_id_foreign")
//   @@index([reviewer_id], map: "task_reviewer_id_foreign")
//   @@index([state_id], map: "task_state_id_foreign")
//   @@index([transcriber_id], map: "task_transcriber_id_foreign")
// }

// model User {
//   id                                Int    @id @default(autoincrement())
//   name                              String @db.VarChar(255) @unique
//   group_id                          Int
//   role_id                           Int
//   task_task_final_reviewer_idTouser Task[] @relation("task_final_reviewer_idTouser")
//   task_task_reviewer_idTouser       Task[] @relation("task_reviewer_idTouser")
//   task_task_transcriber_idTouser    Task[] @relation("task_transcriber_idTouser")
//   group                             Group  @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_group_id_foreign")
//   role                              Role   @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_role_id_foreign")

//   @@index([group_id], map: "user_group_id_foreign")
//   @@index([role_id], map: "user_role_id_foreign")
// }
